#!/usr/bin/python

import bisect
import collections

class NFA(object):
  EPSILON = object()
  ANY = object()
  
  def __init__(self, start_state):
    self.transitions = {}
    self.final_states = set()
    self._start_state = start_state
    self.edge_map = collections.defaultdict(dict)
    
  @property
  def start_state(self):
    return frozenset(self._expand(set([self._start_state])))
  
  def add_transition(self, src, input, dest):
    self.transitions.setdefault(src, {}).setdefault(input, set()).add(dest)
    
  def add_final_state(self, state):
    self.final_states.add(state)
  
  def is_final(self, states):
    return self.final_states.intersection(states)
  
  def _expand(self, states):
    frontier = set(states)
    while frontier:
      state = frontier.pop()
      new_states = self.transitions.get(state, {}).get(NFA.EPSILON, set()).difference(states)
      frontier.update(new_states)
      states.update(new_states)
    return states
  
  def next_state(self, states, input):
    dest_states = set()
    for state in states:
      state_transitions = self.transitions.get(state, {})
      dest_states.update(state_transitions.get(input, []))
      dest_states.update(state_transitions.get(NFA.ANY, []))
    return frozenset(self._expand(dest_states))
  
  def get_inputs(self, states):
    inputs = set()
    for state in states:
      inputs.update(self.transitions.get(state, {}).keys())
    return inputs
  
  def to_dfa(self):
    dfa = DFA(self.start_state)
    frontier = [self.start_state]
    seen = set()
    while frontier:
      current = frontier.pop()
      inputs = self.get_inputs(current)
      for input in inputs:
        if input == NFA.EPSILON: 
          continue

        new_state = self.next_state(current, input)
        if new_state not in seen:
          frontier.append(new_state)
          seen.add(new_state)
          if self.is_final(new_state):
            dfa.add_final_state(new_state)

        if input == NFA.ANY:
          dfa.set_default_transition(current, new_state)

        else:
          dfa.add_transition(current, input, new_state)
    
    return dfa

class DFA(object):
  def __init__(self, start_state):
    self.start_state = start_state
    self.transitions = {}
    self.defaults = {}
    self.final_states = set()
    self.edge_map = collections.defaultdict(dict)
    self.path_map = collections.defaultdict(str)

  def add_transition(self, src, input, dest):
    self.transitions.setdefault(src, {})[input] = dest

  def set_default_transition(self, src, dest):
    self.defaults[src] = dest
  
  def add_final_state(self, state):
    self.final_states.add(state)

  def is_final(self, state):
    return state in self.final_states
  
  def next_state(self, src, input):
    state_transitions = self.transitions.get(src, {})
    return state_transitions.get(input, self.defaults.get(src, None))

  def next_valid_string(self, input):

    if input in self.path_map:
      return self.path_map[input]

    state = self.start_state
    stack = []
    
    # Evaluate the DFA as far as possible
    for i, x in enumerate(input):
      stack.append((input[:i], state, x))
      state = self.transitions.get(state, {}).get(x, self.defaults.get(state, None))
      if not state:        
        break
    else:
      stack.append((input[:i+1], state, None))
      
    if state in self.final_states :
      return input
    
    # Perform a 'wall following' search for the lexicographically smallest
    # accepting state.
    while stack:
      path, state, x = stack.pop()

      if x is None:
        x = u'\0'
      else:
        x = unichr(ord(x) + 1)
      
      if x in self.edge_map[state]:
        x = self.edge_map[state][x]

      else:
        if x in self.transitions.get(state, {}) or state in self.defaults:
          self.edge_map[state][x] = x
          x = x

        else:
          labels = sorted(self.transitions.get(state, {}).keys())

          pos = bisect.bisect_left(labels, x)
          if pos < len(labels):
            self.edge_map[state][x] = labels[pos]
            x = labels[pos]

          else:
            x = None

      if x:
        path += x
        state = self.transitions.get(state, {}).get(x, self.defaults.get(state, None))
        if state in self.final_states:
          self.path_map[input] = path
          return path
        
        stack.append((path, state, None))
    return None

  def is_valid_string(self, input):

    state = self.start_state
    
    # Evaluate the DFA as far as possible
    for i, x in enumerate(input):
      state = self.transitions.get(state, {}).get(x, self.defaults.get(state, None))
      
      if not state:        
        break
        
    if state in self.final_states:
      return True
    else:
      return False

class LevenshteinDFA(object):
  '''
  Deterministic Levenshtein-Automata
  Generates an NFA for the specificed term and lev-dist, then
  uses powerset construction to convert to a DFA
  '''
  
  def __init__(self, W, k):
    self.W = W
    self.k = k

    nfa = NFA((0, 0))
    for i, c in enumerate(w):
      for e in range(k + 1):
        # Correct character
        nfa.add_transition((i, e), c, (i + 1, e))
        if e < k:
          # Insertion
          nfa.add_transition((i, e), NFA.ANY, (i, e + 1))

          # Deletion
          nfa.add_transition((i, e), NFA.EPSILON, (i + 1, e + 1))

          # Substitution
          nfa.add_transition((i, e), NFA.ANY, (i + 1, e + 1))
          
    for e in range(k + 1):
      if e < k:
        nfa.add_transition((len(w), e), NFA.ANY, (len(w), e + 1))
      nfa.add_final_state((len(w), e))

    self.dfa = nfa.to_dfa()

  def search(self, dictionary):

    match = self.dfa.next_valid_string(u'\0')
    
    while match:

      pos = bisect.bisect_left(dictionary, match)

      if pos < len(dictionary):
        next = dictionary[pos]
      else:
        next = None

      if not next:
        return False
      if match == next:
        return True
        
      match = self.dfa..next_valid_string(next)
    

